-- Copyright 2018 Carnegie Mellon University. See Notice.txt
-- Distribution Statement A: Approved for Public Release; Distribution is Unlimited.

package Connectivity_Reachability
public
	annex resolute {**

-------------------
-- Connectivity
-------------------

-- Ensure that all features of all componetns are conencted
-- Result includes a log of all features and their connections

all_component_features_are_connected(comp : component) <=
	** "All features of " comp " are connected" **
	forall(feat : features(comp)). feat_is_connected(feat) 

feat_is_connected(feat : feature) <= 
	** "The feature: " feat " is connected" **
	connections(feat) <> {} and record_set("The connections are ",connections(feat))
	
	        
component_is_sink(comp : component) <=
  ** comp " has no outgoing connections" **
	forall(feat : outgoing_features(comp)). connections(feat) = {} 
	        
component_is_source(comp : component) <=
  ** comp " has no incoming connections" **
	forall(feat : incoming_features(comp)). connections(feat) = {} 


-------------------------------------
-- set of components reachable by port or data access connections (or bus connections)
-------------------------------------


	-- return set of components that are directly reachable via outgoing connections.
	directly_reachable_components(comp: component):{component} =
	let outconns : {connection} = outgoing_component_connections(comp);
	{otherend for (conn: outconns) (otherend: other_connection_end(conn,comp))}


 	-- return set of components that are directly reachable via outgoing connections.
    directly_reachable_components_from_feature(comp: component, fea : feature) : {component} =
    {c for (conn : outgoing_connections(fea))
        (c : other_connection_end( conn, comp))}


-- all components that are reachable via port or data access connections from the given component
-- we consider direct and indirect reachability
-- the use of a set ensures that we do not recurse forever

all_reachable_components(c : component) : {component} =
    recursive_reach_all_components({c})

-- support method to expand on a set of reachable components by the next directly rachable components
-- the use of a set ensures that we do not recurse forever
recursive_reach_all_components(curr: {component}) : {component} =
	let next_ones : {component} = {y for (x : curr) (y : directly_reachable_components(x))};
    let next_new_ones : {component} = {ele for (ele : next_ones)| not(member(ele,curr))};
    if (next_new_ones = {} ) then
    	curr
    else 
    	union(curr, recursive_reach_all_components(next_new_ones))

-- all components that are reachable via port or data access connections from the given component
-- we consider all leaf components, i.e., components with no outgoing connection
-- the use of a set ensures that we do not recurse forever
-- all components that are reachable via port or data access connections from the given component
-- we consider direct and indirect reachability
-- the use of a set ensures that we do not recurse forever

all_reachable_leaf_components(c : component) : {component} =
    recursive_reached_leaf_components({c})

-- support method to expand on a set of reachable components by the next directly rachable components
-- the use of a set ensures that we do not recurse forever
recursive_reached_leaf_components(curr: {component}) : {component} =
	let next_ones : {component} = {y for (x : curr) (y : directly_reachable_components(x))};
    let next_new_ones : {component} = {ele for (ele : next_ones)| not(member(ele,curr))};
    if (next_new_ones = {} ) then
    	curr
    else 
    	{ next for (next : recursive_reached_leaf_components(next_new_ones)) | (outgoing_component_connections(next) = {})}


-- all port, data, bus access connections that are traversed when identifying reachable components
-- we consider direct and indirect reachability

all_reachable_connections(c : component) : {connection} =
    recursive_visited_connections({c})

-- support method to expand on a set of visited connections in recrusive traversal
recursive_visited_connections(curr: {component}) : {connection} = 
	let outconns : {connection} = outgoing_component_connections(comp);

	let next_ones : {component} = {otherend for (conn: outconns) (otherend: other_connection_end(conn,comp))};
    let next_new_ones : {component} = {ele for (ele : next_ones)| not(member(ele,curr))};
    if (next_new_ones = {} ) then
    	{}
    else 
    	union(outconns, recursive_visited_connections(next_new_ones))

---------------------------------
-- record the reachable sets in Resolute result structure
---------------------------------
	record_reachable_endpoints(comp: component)<=
	** comp " reaches " ep **
	let ep : {component} = all_reachable_leaf_components(comp);
	true


	record_reachable_components(comp: component)<=
	** comp " reaches " ep **
	let ep : {component} = all_reachable_components(comp);
	true

	record_contained_threads(pr : component) <=
	** "Threads contained in given component (process) " pr "  are " thrds **
		let thrds: {component} = contained_threads(pr); true

	**};
end Connectivity_Reachability;
